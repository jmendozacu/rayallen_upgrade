<?php
/**
 * @category   Amconnector
 * @package    Kensium_Amconnector
 * @copyright  Copyright (c) 2016 Kensium Solution Pvt.Ltd. (http://www.kensiumsolutions.com/)
 */
namespace Kensium\Amconnector\Helper;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Setup\Model\License;
use SoapClient;
use Magento\Framework\HTTP\PhpEnvironment\ServerAddress;
use Kensium\Amconnector\Model\ResourceModel\Licensecheck as resourceModelLicense;
use Magento\Config\Model\ResourceModel\Config;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Stdlib\DateTime\DateTime;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Backend\Model\Auth\Session;
use Kensium\Lib;
class Licensecheck
{

    protected  $storeManagerInterface;

    protected  $resource;

    protected $resourceModelLicense;

    /**
     * @var DateTime
     */
    protected $date;
    /**
     * @var \Magento\Config\Model\ResourceModel\Config
     */
    protected $config;

    /**
     * @var \Magento\Framework\HTTP\PhpEnvironment\ServerAddress
     **/
    protected $_serverAddress;

    protected $connection;

    protected  $_scopeConfig;

    /**
     * @var \Magento\Backend\Model\Auth\Session
     */
    protected $_adminSession;

    protected $common;

    public function __construct(StoreManagerInterface $storeManagerInterface,
                                resourceModelLicense $resourceModelLicense,
                                ServerAddress $_serverAddress,
                                Config $config,
                                ResourceConnection $resource,
                                DateTime $date,
                                ScopeConfigInterface $scopeConfig,
                                Session $adminSession,
                                Lib\Common $common
    ){
        $this->storeManagerInterface = $storeManagerInterface;
        $this->resourceModelLicense = $resourceModelLicense;
        $this->_serverAddress = $_serverAddress;
        $this->config = $config;
        $this->resource = $resource;
        $this->date = $date;
        $this->_scopeConfig = $scopeConfig;
        $this->_adminSession = $adminSession;
    }

    protected function getConnection()
    {
        if (!$this->connection) {
            $this->connection = $this->resource->getConnection('core_write');
        }
        return $this->connection;
    }

    public function getMacLinux()
    {
        if (strtoupper(php_uname('s')) === 'LINUX') {

            $osvars = array();
            $files = glob('/etc/*-release');

            foreach ($files as $file) {
                $lines = array_filter(array_map(function ($line) {

                    // split value from key
                    $parts = explode('=', $line);

                    // makes sure that "useless" lines are ignored (together with array_filter)
                    if (count($parts) !== 2) return false;

                    // remove quotes, if the value is quoted
                    $parts[1] = str_replace(array('"', "'"), '', $parts[1]);
                    return $parts;

                }, file($file)));

                foreach ($lines as $line)
                    $osvars[$line[0]] = $line[1];
            }

            /**
             *
             */

            exec('netstat -ie', $result);
            if (is_array($result)) {
                $iface = array();
                foreach ($result as $key => $line) {
                    if ($key > 0) {
                        $tmp = str_replace(" ", "", substr($line, 0, 10));
                        if ($tmp <> "") {
                            $macpos = strpos($line, "HWaddr");
                            if ($macpos !== false) {
                                $iface[] = strtolower(substr($line, $macpos + 7, 17));
                            }
                        }
                    }
                }
            } else {
                $iface = "notfound";
            }

            if (is_array($iface) && !empty($iface))
            {
                return $iface;
            } else {

                /**
                 *
                 */
                if ('centos' == trim($osvars['ID']) && '7' == trim($osvars['VERSION_ID'])) {
                    exec('netstat -ie', $result);
                    if (is_array($result)) {
                        $iface = array();
                        foreach ($result as $key => $line) {
                            if ($key > 0) {
                                $tmp = str_replace(" ", "", substr($line, 0, 10));
                                if ($tmp <> "") {
                                    $macpos = strpos($line, "ether");
                                    if ($macpos !== false) {
                                        $iface[] = strtolower(substr($line, $macpos + 6, 17));
                                    }
                                }
                            }
                        }
                        return $iface;
                    } else {
                        return "notfound";
                    }
                } else {
                    exec('netstat -ie', $result);
                    if (is_array($result)) {
                        $iface = array();
                        foreach ($result as $key => $line) {
                            if ($key > 0) {
                                $tmp = str_replace(" ", "", substr($line, 0, 10));
                                if ($tmp <> "") {
                                    $macpos = strpos($line, "HWaddr");
                                    if ($macpos !== false) {
                                        $iface[] = strtolower(substr($line, $macpos + 7, 17));
                                    }
                                }
                            }
                        }
                        return $iface;
                    } else {
                        return "notfound";
                    }
                }
            }
        } elseif (strtoupper(php_uname('s')) === 'DARWIN') {
            exec('ifconfig', $result);
            $ehters = array();
            if (is_array($result)) {
                $iface = array();
                foreach ($result as $key => $line) {
                    if ($key > 0) {
                        $tmp = str_replace(" ", "", substr($line, 0, 6));
                        if ($tmp <> "") {
                            $macpos = strpos($line, "ether");
                            if ($macpos !== false) {
                                $iface[] = strtolower(substr($line, $macpos + 6, 17));
                            }
                        }
                    }
                }
                return $iface;
            } else {
                return "notfound";
            }
        }
    }

    /**
     * Returns current configuration scope store id
     * @return int
     */
    public function getCurrentScopeStoreId()
    {
        if (strlen($code = $this->storeManagerInterface->getStore()->getCode())) // store level
        {
            $store_id = $this->storeManagerInterface->getStore($code)->getId();
        } elseif (strlen($code = $this->storeManagerInterface->getWebsite()->getCode())) // website level
        {
            $website_id = $this->storeManagerInterface->getWebsite($code)->getId();
            $store_id = $this->storeManagerInterface->getWebsite($website_id)->getDefaultStore()->getId();
        } else // default level
        {
            $store_id = 0;
        }
        return $store_id;
    }

    /**
     * @param null $licenseKey
     * @param null $from_cron
     * @param null $storeId
     */
    public function checkLicense($licenseKey, $from_cron, $storeId)
    {
        try {
            if(!isset($storeId))
            {
                $storeId = 0;
            }
            if(!isset($from_cron))
            {
                $from_cron = 0;
            }
            /**
             * Get current store domains from Magento
             */
            if (!$from_cron) {
                $storeId = $this->storeManagerInterface->getStore()->getId();
            }

            $store = $this->storeManagerInterface->getStore($storeId); //a store object
            $websiteUrl = $this->storeManagerInterface->getWebsite($store->getWebsiteId())->getConfig('web/unsecure/base_url');
            $storeUrl = $store->getBaseUrl('web');
            $currentStoreCode = $store->getCode();
            /**
             * Call to KENSIUM server once in a day
             */
            $response = $this->common->callAmconnectorLicenseServer($licenseKey);
            $data = json_decode($response);
            $status = $data->LicenseDetails['0']->LicenseStatus;
            if($data->LicenseDetails['0']->IsExpiryDateDefined)
            {
                $expiryDate = $data->LicenseDetails['0']->DateExpires;
                $currentDate = $this->date->date('Y-m-d H:i:s');
                if(strtotime($expiryDate) < strtotime($currentDate))
                {
                    $status = "Invalid";
                }else{
                    $status = "Valid";
                }
            }

            if (strtolower($status) == 'invalid') {
                if ($from_cron)
                    $this->resourceModelLicense->licenseCheck($licenseKey, 'invalid', $response, $storeId);
                return 'Invalid';
            } else {
                $customData = $data->LicenseDetails['0']->CustomData;
                $customDataExplode = explode('||-||', $customData);
                $keyMacIds= $domains = $storeViews ='';
                foreach ($customDataExplode as $licenseInfo) {
                    if(strpos($licenseInfo, "LicenseTypeValue")!== false){
                        $licenseTypeValue = str_replace('LicenseTypeValue=', '', $licenseInfo);
                    }elseif(strpos($licenseInfo, "IPAddress")!== false){
                        $ipAddress = str_replace('IPAddress=', '', $licenseInfo);//Ip Address
                    }elseif(strpos($licenseInfo, "MacAddress")!== false){
                        $macIdStr = str_replace('MacAddress=', '', $licenseInfo);//Mac Id (comma separated)
                        $keyMacIds = explode(',', $macIdStr);
                    }elseif(strpos($licenseInfo, "EmailAddress")!== false){
                        $emailAddress = str_replace('EmailAddress=', '', $licenseInfo);//Email Address
                    }elseif(strpos($licenseInfo, "DomainName")!== false){
                        $domainStr = str_replace('DomainName=', '', $licenseInfo);//domains (comma separated)
                        $domains = explode(',', $domainStr);
                    }elseif(strpos($licenseInfo, "Storeview")!== false){
                        $storeStr = str_replace('Storeview=', '', $customDataExplode[4]);
                        $storeViews = explode(', ',$storeStr);
                    }
                }
                foreach ($domains as $domain) {
                    if (strpos($storeUrl, 'http://') !== false && strpos($domain, 'http://') === false)
                    {
                        $domain = 'http://'.$domain;
                    }elseif(strpos($storeUrl, 'https://') !== false && strpos($domain, 'https://') === false){
                        $domain = 'https://'.$domain;
                    }
                    $checkSlash = substr(trim($domain), -1);
                    if ($checkSlash != '/')
                        $domainsURLs[] = trim($domain) . '/';
                    else
                        $domainsURLs[] = trim($domain);
                }
                $macIds = $this->getMacLinux();
                $serverIP = $this->_serverAddress->getServerAddress();
                if ($serverIP != $ipAddress) {
                    if ($from_cron)
                        $this->resourceModelLicense->licenseCheck($licenseKey, 'invalid', $response, $storeId);
                    return 'Invalid IP Address';//'Invalid';
                } else {
                    $allWebsites = $this->storeManagerInterface->getWebsites();
                    $allStoreDomainData = array();
                    $allStoreCodesOfDomain = array();
                    foreach ($allWebsites as $website) {
                        $storeIds = $website->getStoreIds();
                        $getWebsiteUrl = $website->getConfig('web/unsecure/base_url');
                        foreach($storeIds as $store_id)
                        {
                            $storeCode = $this->storeManagerInterface->getStore($store_id)->getCode();
                            if(in_array($storeCode,$storeViews))
                            {
                                $allStoreCodesOfDomain[$storeCode] = $getWebsiteUrl;
                            }
                        }
                        $allStoreDomainData[] = $getWebsiteUrl;
                    }

                    $originalDomains = array();
                    $domainsWithQuotes = array();
                    foreach($domainsURLs as $domain)
                    {
                        /**
                         * check website urls exist in magento
                         */
                        if(in_array($domain,$allStoreDomainData))
                        {
                            $storeCodes = array_keys($allStoreCodesOfDomain,$domain);
                            if(count($storeCodes) > 0){
                                foreach($storeCodes as $_stCode){
                                    $getStoreIdByCode = $this->storeManagerInterface->getStore($_stCode)->getId();
                                    $originalDomains[$getStoreIdByCode] = $domain;
                                }
                            }
                            $domainsWithQuotes[] = "'".$domain."'";
                        }
                    }

                    $originalStoreCodes = array();
                    $originalDomainsCommaSeparated  = implode(',',$domainsWithQuotes);
                    $tablePrefix = $this->config->getTable('amconnector_license_check');
                    if($storeId == 0 || $storeId == 1)
                        $queryDomain = "SELECT store_id  from  " . $tablePrefix . " where license_url IN (" . $originalDomainsCommaSeparated . ") and store_id IN('0','1')";
                    else
                        $queryDomain = "SELECT store_id  from  $tablePrefix where license_url='" . $storeUrl . "'";
                    $kemStoreIds = $this->getConnection()->fetchAll($queryDomain);
                    $kemIds = array();
                    if (count($kemStoreIds)) {
                        foreach ($kemStoreIds as $kemStoreId) {
                            $kemIds[] = $kemStoreId['store_id'];
                        }
                    }

                    $codeFlag = false;
                    if (in_array($currentStoreCode, $storeViews) && in_array($websiteUrl,$originalDomains)) {
                        $codeFlag = true;
                    }


                    if (!$codeFlag) {
                        if ($from_cron)
                            $this->resourceModelLicense->licenseCheck($licenseKey, 'invalid', $response, $storeId);
                        return 'Invalid Store Code';
                    } else {
                        foreach ($keyMacIds as $keyMacId) {
                            if (is_array($macIds)) {

                                if (in_array($keyMacId, $macIds)) {
                                    $idFlag = true;
                                }
                            } else {
                                if ($keyMacId == $macIds) {
                                    $idFlag = true;
                                }
                            }
                        }
                        if (!$idFlag) {
                            if ($from_cron)
                                $this->resourceModelLicense->licenseCheck($licenseKey, 'invalid', $response, $storeId);
                            return 'Invalid MacId';
                        } else {

                            $this->resourceModelLicense->licenseCheck($licenseKey, $status, $response, $storeId, $licenseTypeValue, $from_cron,$websiteUrl,$originalDomains,$allStoreCodesOfDomain);
                            return $status;
                        }
                    }
                }
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }

    /**
     * @return string
     */
    public function getLicenseDetails()
    {

        $values = base64_encode("Domain Name     : " . $this->_scopeConfig->getValue('license/license_request/domainnames')) . "\n";
        $values .= base64_encode("IP Address      : " . $this->_scopeConfig->getValue('license/license_request/ipaddress')) . "\n";
        $values .= base64_encode("MAC ID          : " . $this->_scopeConfig->getValue('license/license_request/macids')) . "\n";
        $values .= base64_encode("License Type    : " . $this->_scopeConfig->getValue('license/license_request/licensetype')) . "\n";
        $values .= base64_encode("Email Recipient : " . $this->getAdminEmail());
        return $values;
    }

    /**
     * @return string
     */
    public function getNewLicenseDetails()
    {
        $values = base64_encode("Domain Name     : " . $this->_scopeConfig->getValue('license/add_domain_request/add_domainnames')) . "\n";
        $values .= base64_encode("IP Address      : " . $this->_scopeConfig->getValue('license/add_domain_request/add_ipaddress')) . "\n";
        $values .= base64_encode("MAC ID          : " . $this->_scopeConfig->getValue('license/add_domain_request/add_macids')) . "\n";
        $values .= base64_encode("License Type    : " . $this->_scopeConfig->getValue('license/add_domain_request/add_license_type')) . "\n";
        $values .= base64_encode("Email Recipient : " . $this->getAdminEmail());
        return $values;
    }

    /**
     * @return mixed change sql query to magento model
     */
    public function getAdminEmail()
    {

        $emailId = $this->_scopeConfig->getValue('amconnectorlicense/licenserequest/emailrecipient');
        if ($emailId == '') {
            return $this->_adminSession->getUser()->getEmail();
        } elseif ($emailId != '') {
            return $emailId;
        }
    }

    /**
     * @param $storeId
     * @return string
     */
    public function getDomainDetails($storeId)
    {
        $response = $this->resourceModelLicense->getResponse($storeId);
        $data = json_decode($response);
        $statusEncoded = base64_encode($data->LicenseDetails['0']->LicenseStatus);
        $statusInvalid = base64_encode('Invalid');
        $licenseType = $data->LicenseDetails['0']->IsExpiryDateDefined;
        $expirationDate = $data->LicenseDetails['0']->DateExpires;
        $customData = $data->LicenseDetails['0']->CustomData;
        $customDataExplode = explode('||-||', $customData);
        $domains = $macId =  $ipAddress= $emailAddress ='';

        foreach ($customDataExplode as $licenseInfo) {

            if(strpos($licenseInfo, "IPAddress")!== false){
                $ipAddress = str_replace('IPAddress=', '', $licenseInfo);//Ip Address
            }elseif(strpos($licenseInfo, "MacAddress")!== false){
                $macIdStr = str_replace('MacAddress=', '', $licenseInfo);//Mac Id (comma separated)
                $macId = explode(',', $macIdStr);
            }elseif(strpos($licenseInfo, "EmailAddress")!== false){
                $emailAddress = str_replace('EmailAddress=', '', $licenseInfo);//Email Address
            }elseif(strpos($licenseInfo, "DomainName")!== false){
                $domainStr = str_replace('DomainName=', '', $licenseInfo);//domains (comma separated)
                $domains = explode(',', $domainStr);
            }
        }

        return $ipAddress . '=' . $macId . '=' . $emailAddress . '=' . $domains . '=' . $licenseType . '=' . $expirationDate;
    }

    public function downloadLicense($file){
        if (file_exists($file)) {
            //set appropriate headers
            header('Content-Description: File Transfer');
            header('Content-Type: application/txt');
            header('Content-Disposition: attachment; filename='.basename($file));
            header('Expires: 0');
            header('Cache-Control: must-revalidate');
            header('Pragma: public');
            header('Content-Length: ' . filesize($file));
            ob_clean();flush();
            readfile($file);
            unlink($file);
        }
    }

}
